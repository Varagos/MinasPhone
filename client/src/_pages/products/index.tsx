import Head from 'next/head';
import { useState } from 'react';
import { api } from '@/api';
import { ProductPaginatedResponse } from '@/api/types/products';
import { GetServerSideProps } from 'next';
import ProductsLayout from '@/components/Products/ProductsLayout';
import { parseRangeFromQuery } from '@/utils/serverParsers';
import { useRouter } from 'next/router';
import useUrl from '@/hooks/useUrl';
import { parseUrlRange } from '@/utils/pagination';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

interface ProductsProps {
  products: ProductPaginatedResponse;
}

export const getServerSideProps: GetServerSideProps<ProductsProps> = async (
  context
) => {
  const { query } = context;

  // Use the utility function to parse the range parameter
  const [start, end] = parseRangeFromQuery(query.range);
  const products = await api.products.findMany({
    range: [start, end],
  });
  return {
    props: {
      products,

      ...(await serverSideTranslations(context.locale!, ['footer', 'navbar'])),
    },
  };
};

export default function ProductsPage({ products }: ProductsProps) {
  const router = useRouter();
  const url = router.asPath;
  const { setRange, range } = useUrl(url);

  const { initialPage, itemsPerPage, totalPages } = parseUrlRange(
    range as any,
    products.count
  );
  const [page, setPage] = useState(initialPage);

  const onPageChange = (newPage: number) => {
    setPage(newPage);
    const newRange: [number, number] = [
      (newPage - 1) * itemsPerPage,
      newPage * itemsPerPage - 1,
    ]; // Adjust based on your items per page
    setRange(newRange);
  };

  return (
    <>
      <Head>
        <title>Products</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProductsLayout
        title={'Προϊόντα'}
        products={products.data}
        totalPages={totalPages}
        page={page}
        onPageChange={onPageChange}
        totalProducts={products.count}
        breadcrumbItems={[{ label: 'Προϊόντα', href: '/products' }]}
      />
    </>
  );
}
