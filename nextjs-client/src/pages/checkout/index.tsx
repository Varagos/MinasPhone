import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import {
  CssBaseline,
  Paper,
  Step,
  StepLabel,
  Stepper,
  Typography,
} from '@mui/material';
import Link from 'next/link';

import useStyles from './_styles';
import { refreshCart } from '@/redux/slices/cart';
import {
  captureCheckoutOrder,
  checkoutEnded,
  generateCheckoutToken,
} from '@/redux/slices/checkout';
import { useAppDispatch, useAppSelector } from '@/redux/store';
import { CheckoutCapture } from '@/types/checkout-capture';
import LinkButton from '@/components/custom-components/LinkButton';
import Account from '@/components/CheckoutForm/Account';
import PaymentForm from '@/components/CheckoutForm/Payment/PaymentForm';
import Confirmation from '@/components/CheckoutForm/Confirmation/Confirmation';
import Form from '@/components/CheckoutForm/Form/Form';

const steps = ['Λογαριασμός', 'Διέυθυνση', 'Πληρωμή'];

export type CheckoutOrderInfo = {
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  shippingCountry: 'GR';
  shippingSubdivision: string;
  shippingOption: string;
  receiptMethod: 'store' | 'courier';

  street: string;
  town_city: string;
  postal_zip_code: string;
};

export default function Checkout() {
  const [activeStep, setActiveStep] = useState(0);
  const [shippingData, setShippingData] = useState<Partial<CheckoutOrderInfo>>(
    {}
  );
  const [error, setErrorMessage] = useState('');

  const classes = useStyles();

  const cart = useAppSelector((state) => state.cart.data);
  const dispatch = useAppDispatch();

  const handleCaptureCheckout = async (
    checkoutTokenId: string,
    newOrder: CheckoutCapture
  ) => {
    try {
      // const incomingOrder = await commerce.checkout.capture(checkoutTokenId, newOrder);
      console.log('handling capture checkout', newOrder);
      await dispatch(
        captureCheckoutOrder({ checkoutTokenId: checkoutTokenId, newOrder })
      ).unwrap();

      dispatch(refreshCart());
    } catch (error) {
      setErrorMessage(
        'There was an error capturing checkout' +
          (error as any).data.error.message
      );
    }
  };
  if (!cart) return <div>No cart</div>;

  useEffect(() => {
    dispatch(generateCheckoutToken({ cartId: cart.id }));
  }, []);

  useEffect(() => {
    return () => {
      // // console.log('cleaned up');
      dispatch(checkoutEnded());
    };
  }, []);

  const nextStep = () => setActiveStep((prevActiveStep) => prevActiveStep + 1);
  const backStep = () => setActiveStep((prevActiveStep) => prevActiveStep - 1);

  const next = (data: Partial<CheckoutOrderInfo>) => {
    // console.log('NEXT function', data);
    setShippingData((currentOrderInfo) => ({ ...currentOrderInfo, ...data }));
    nextStep();
  };

  if (error) {
    <>
      <Typography variant="h5">Error: {error}</Typography>
      <br />
      <LinkButton href="/" variant="outlined" type="button">
        Back to Home
      </LinkButton>
    </>;
  }

  return (
    <>
      <Head>
        <title>Minas Phone</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <CssBaseline />
        <div className={classes.toolbar} />
        <main className={classes.layout}>
          <Paper className={classes.paper} sx={{ mx: 20 }}>
            <Typography variant="h4" align="center">
              Ολοκλήρωση Παραγγελίας
            </Typography>
            <Stepper activeStep={activeStep} className={classes.stepper}>
              {steps.map((step) => (
                <Step key={step}>
                  <StepLabel>{step}</StepLabel>
                </Step>
              ))}
            </Stepper>
            {activeStep === steps.length ? (
              <Confirmation />
            ) : (
              <Form
                activeStep={activeStep}
                next={next}
                nextStep={nextStep}
                backStep={backStep}
                shippingData={shippingData}
                handleCaptureCheckout={handleCaptureCheckout}
              />
            )}
          </Paper>
        </main>
      </main>
    </>
  );
}
