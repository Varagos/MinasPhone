version: '3'
name: minas_phone_prod

services:
  api:
    build:
      context: ../..
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres
      - supertokens
    networks:
      - app_network
    environment:
      - NODE_ENV=production
      - DB_DOCKER_HOST=postgres
      - ST_DOCKER_URI=http://supertokens:3567

  postgres:
    image: 'postgres:latest'
    ports:
      - 5432:5432
    user: ${DB_USERNAME}
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:6.0
    ports:
      - 3567:3567
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRESQL_CONNECTION_URI: 'postgresql://${ST_DB_USER}:${ST_DB_PASSWORD}@${ST_DB_HOST}:${ST_DB_PORT}/${ST_DB_NAME}'
      API_KEYS: ${SUPERTOKENS_API_KEYS}
      POSTGRESQL_TABLE_SCHEMA: 'supertokens'
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
volumes:
  postgres-data:
